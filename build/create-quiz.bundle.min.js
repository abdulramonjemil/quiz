(()=>{"use strict";class e{constructor(e,t){this.$props=e,this.$children=t,this.$componentElement=this.$render(e,t)}get componentElement(){return this.$componentElement}$render(){throw new Error(`${this.constructor.name} does not implement the \`$render\` method`)}reRender(){const e=this.$render();this.$componentElement.replaceWith(e),this.$componentElement=e}}const t="instanceRef";function n(e,t){Array.isArray(t)?t.forEach((t=>n(e,t))):"boolean"!=typeof t&&null!=t&&e.appendChild(t instanceof HTMLElement?t:document.createTextNode(String(t)))}function r(e,t,r){const o=document.createElement(e);return Object.entries(t).forEach((([e,t])=>{"elementRef"===e&&"object"==typeof t?t.current=o:("string"==typeof t&&o.setAttribute(e,t),o[e]=t)})),r&&n(o,r),o}const{create:o}=class extends e{static create(){return this.name}$render(){return function(e,{children:n,...o},c){const s={...o,key:c};if("string"==typeof e)return r(e,s,n);if("function"==typeof e)return function(e,n,r){try{return e(n,r)}catch(o){const c=e,{[t]:s,...i}=n,a=new c(i,r);return"object"==typeof s&&(s.current=a),a.componentElement}}(e,s,n);throw new TypeError("`type` must be a string or a function")}("div",{className:"fader",id:"killer",player:"folder",children:this.name})}}})();