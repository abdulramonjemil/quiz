@use "sass:color";
@use "sass:math";
@use "partials/element";
@use "partials/utils";

$gap-between-question-elements: utils.get-constant(element-spacing);
$min-option-width: 50px;
$option-letter-span: 30px;

.Root {
  @include element.height-config;

  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  position: relative;
}

.Question {
  height: max-content;
  max-height: 100%;
  overflow-y: auto;
  width: 100%;

  @include element.scrollbar;

  &__Title {
    display: block;
    width: 100%;
    text-align: center;
  }
}

.OptionsRoot {
  display: flex;
  flex-wrap: wrap;
  gap: $gap-between-question-elements;
  margin-top: $gap-between-question-elements;
}

.Option {
  $option-spacing-length: 8px;
  $total-occupiable-horizontal-space: calc(
    100% - $gap-between-question-elements
  );
  $half-of-occupiable-space: calc($total-occupiable-horizontal-space / 2);

  flex: 1 max-content;
  min-width: max($half-of-occupiable-space, $min-option-width);
  position: relative;

  .Question:disabled &:not(.Option_correct, .Option_incorrect) {
    opacity: 0.8;
  }

  &__Input {
    left: 0;
    opacity: 0.001;
    position: absolute;
    top: 0;
  }

  $selected-option-dark-color: color.scale(
    utils.get-color(soft-dark),
    $lightness: -25%
  );
  $correct-option-color: rgb(15 90 40);
  $incorrect-option-color: rgb(90 13 13);

  &__Body {
    border: 2px solid utils.get-color(soft-dark);
    border-radius: utils.get-constant(border-radius);
    cursor: pointer;
    display: grid;
    gap: $option-spacing-length;
    grid-template-columns: $option-letter-span 1fr;
    height: 100%;
    padding: $option-spacing-length;

    &:hover {
      background-color: utils.get-color(soft-dark);
      border-color: utils.get-color(soft-dark);
    }

    .Option_correct & {
      background-color: $correct-option-color;
      border-color: $correct-option-color;
    }

    .Option_incorrect & {
      background-color: $incorrect-option-color;
      border-color: $incorrect-option-color;
    }

    .Option__Input:focus + & {
      outline: 2px solid utils.get-color(deep-light);
      outline-offset: -2px;
    }

    .Question:disabled & {
      cursor: not-allowed;
    }

    .Option__Input:checked:not(.Option_correct *, .Option_incorrect *) + & {
      background-color: $selected-option-dark-color;
      border-color: $selected-option-dark-color;
    }
  }

  &__Letter {
    align-items: center;
    background-color: utils.get-color(soft-dark);
    border-radius: utils.get-constant(border-radius);
    display: flex;
    font-weight: 500;
    justify-content: center;
    line-height: $option-letter-span;

    .Option_correct & {
      background-color: utils.get-color(deep-light);
      color: $correct-option-color;
    }

    .Option_incorrect & {
      background-color: utils.get-color(deep-light);
      color: $incorrect-option-color;
    }

    .Option__Body:hover & {
      background-color: utils.get-color(deep-light);
      color: utils.get-color(soft-dark);
    }

    .Option__Input:checked + .Option__Body & {
      background-color: utils.get-color(deep-light);
      color: $selected-option-dark-color;
    }
  }

  &__Text {
    align-items: center;
    display: flex;
    padding-left: math.div($option-spacing-length, 2);
  }
}

.Explanation {
  background-color: utils.get-color(soft-dark);
  border-radius: utils.get-constant(border-radius);
  display: none;
  margin-top: $gap-between-question-elements;
  padding: 10px;

  &_enabled {
    display: block;
  }

  &__Toggler {
    $toggler-default-bg-color: color.change(
      utils.get-color(deep-dark),
      $alpha: 0.3
    );

    $toggler-interaction-bg-color: color.change(
      utils.get-color(deep-dark),
      $alpha: 0.7
    );

    background-color: $toggler-default-bg-color;
    border: 2px solid utils.get-color(deep-light);
    border-radius: utils.get-constant(border-radius);
    color: utils.get-color(deep-light);
    cursor: pointer;
    font-size: 1em;
    font-weight: 500;
    padding: 6px 10px;
    transition: background-color linear 0.1s;

    &:focus {
      background-color: $toggler-interaction-bg-color;
    }

    &:focus-visible {
      outline: 2px solid utils.get-color(deep-light);
      outline-offset: 2px;
    }

    &:hover {
      background-color: $toggler-interaction-bg-color;
    }
  }

  @mixin explanation-part-hidden-by-default {
    display: none;

    .Explanation_shown & {
      display: block;
    }
  }

  &__Divider {
    background-color: utils.get-color(deep-dark);
    height: 1px;
    margin-top: $gap-between-question-elements;
    width: 100%;

    @include explanation-part-hidden-by-default;
  }

  &__Content {
    background-color: color.change(utils.get-color(deep-dark), $alpha: 0.7);
    border-radius: utils.get-constant(border-radius);
    margin-top: $gap-between-question-elements;
    padding: 8px;

    @include explanation-part-hidden-by-default;
  }
}
