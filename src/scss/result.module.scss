@use "sass:math";
@use "sass:string";
@use "core/custom";
@use "core/theme";
@use "elements/scroll-shadow";
@use "elements/presentation";
@use "lib/number";

$indicator-circle-animation-duration: 1.5s;
$indicator-circle-gradient-id: string.unique-id();
$indicator-circle-final-dashoffset-css-var: --indicator-circle-final-dashoffset;
$result-percentage-css-var: --result-percentage;

$result-primary-color: hsl(180deg 25% 65%);
$result-secondary-color: hsl(311deg 20% 63%);

$indicator-svg-viewbox-width: 100;
$indicator-circle-radius: 50;
$indicator-circle-circumference: 2 * math.$pi * $indicator-circle-radius;

:export {
  INDICATOR_CIRCLE_GRADIENT_ID: $indicator-circle-gradient-id;
  INDICATOR_CIRCLE_CIRCUMFERENCE: $indicator-circle-circumference;
  INDICATOR_CIRCLE_ANIMATION_DURATION_SECS: number.unitless(
    $indicator-circle-animation-duration
  );
  INDICATOR_CIRCLE_FINAL_DASHOFFSET_CSS_VAR: $indicator-circle-final-dashoffset-css-var;
  RESULT_PERCENTAGE_CSS_VAR: $result-percentage-css-var;
  RESULT_PRIMARY_COLOR: $result-primary-color;
  RESULT_SECONDARY_COLOR: $result-secondary-color;
}

.Result {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;

  @include presentation.contained-content();
  @include scroll-shadow.root($position: relative);

  &__Inner {
    display: flex;
    flex: 0 1 max-content;
    gap: 30px;
    height: max-content;
    max-height: 100%;
    width: 100%;
    max-width: 800px;
    overflow-y: auto;
    padding: 20px 40px;

    @include custom.scrollbar();
    @include scroll-shadow.scrollable();

    @container (width <= 720px) {
      gap: 20px;
      padding: 20px;
    }

    @container (width <= 560px) {
      align-items: center;
      flex-direction: column;
    }
  }
}

.Indicator {
  --indicator-dimension: 220px;
  --indicator-bar-dimension: 35px;
  --indicator-unitless-dimension: 220;
  --indicator-bar-unitless-dimension: 35;

  $indicator-dimension: var(--indicator-dimension);
  $indicator-bar-dimension: var(--indicator-bar-dimension);

  $indicator-unitless-dimension: var(--indicator-unitless-dimension);
  $indicator-bar-unitless-dimension: var(--indicator-bar-unitless-dimension);

  align-items: center;
  display: flex;
  flex: 0 0 $indicator-dimension;
  height: $indicator-dimension;
  justify-content: center;
  position: relative;
  width: $indicator-dimension;

  &_rendered {
    // Used to render the indicator animations
  }

  @container (width <= 720px) {
    --indicator-dimension: 180px;
    --indicator-bar-dimension: 30px;
    --indicator-unitless-dimension: 180;
    --indicator-bar-unitless-dimension: 30;
  }

  @container (width <= 560px) {
    --indicator-dimension: 220px;
    --indicator-bar-dimension: 35px;
    --indicator-unitless-dimension: 220;
    --indicator-bar-unitless-dimension: 35;
  }

  @container (width <= 300px) {
    --indicator-dimension: 180px;
    --indicator-bar-dimension: 30px;
    --indicator-unitless-dimension: 180;
    --indicator-bar-unitless-dimension: 30;
  }

  &__OuterShadow {
    border-radius: 50%;
    box-shadow: 0 0 7px -4px $result-secondary-color;
    height: 100%;
    width: 100%;
  }

  &__InnerShadow {
    $indicator-inner-shadow-dimension: calc(
      100% - $indicator-bar-dimension * 2
    );

    border-radius: 50%;
    box-shadow: inset 0 0 7px -4px $result-secondary-color;
    height: $indicator-inner-shadow-dimension;
    position: absolute;
    width: $indicator-inner-shadow-dimension;
  }

  &__SVG {
    $indicator-svg-dimension: calc(
      $indicator-dimension - $indicator-bar-dimension
    );

    height: $indicator-svg-dimension;
    overflow: visible;
    position: absolute;
    transform: rotate(-90deg);
    width: $indicator-svg-dimension;
  }

  &__Circle {
    fill: none;
    stroke: url("##{$indicator-circle-gradient-id}");
    stroke-width: calc(
      $indicator-bar-dimension *
        (
          $indicator-svg-viewbox-width /
            ($indicator-unitless-dimension - $indicator-bar-unitless-dimension)
        )
    );

    stroke-dasharray: $indicator-circle-circumference;
    stroke-dashoffset: $indicator-circle-circumference;
    stroke-linecap: round;
    transition: stroke-dashoffset $indicator-circle-animation-duration
      ease-in-out;

    .Indicator_rendered & {
      stroke-dashoffset: var(#{$indicator-circle-final-dashoffset-css-var});
    }
  }

  &__Percent {
    align-items: center;
    display: flex;
    justify-content: center;
    height: max-content;
    position: absolute;
    width: max-content;

    background-image: linear-gradient(
      to top,
      $result-primary-color,
      $result-secondary-color
    );
    background-clip: text;
    -webkit-background-clip: text; /* stylelint-disable-line */

    color: transparent;
    font-size: calc($indicator-dimension / 5);
    font-weight: 900;
  }

  &__PercentSymbol {
    font-size: calc($indicator-dimension / 8);
  }
}

.Summary {
  display: flex;
  flex-direction: column;
  flex: 0 1 max-content;
  justify-content: center;
  opacity: 0;

  $transition-delay: $indicator-circle-animation-duration * math.div(2, 9);
  $transition-duration: $indicator-circle-animation-duration - $transition-delay;

  transition: opacity linear $transition-duration;
  transition-delay: $transition-delay;

  .Indicator_rendered + & {
    opacity: 1;
  }

  @container (width <= 560px) {
    align-items: center;
    justify-content: flex-start;
    margin-top: 10px;
    text-align: center;
  }

  &__Text {
    font-size: 1.2em;
  }

  &__Cta {
    background-color: transparent;
    color: theme.color("surface-foreground-vibrant");

    cursor: pointer;
    border-radius: theme.constant("border-radius");

    margin-top: 20px;
    width: max-content;

    @container (width <= 720px) {
      margin-top: 10px;
    }

    &:focus-visible {
      outline: 2px solid theme.color("surface-foreground");
    }
  }

  &__CtaArrow {
    display: inline-block;
    transition: transform ease-in 0.1s;

    .Summary__Cta:hover & {
      transform: translateX(50%);
    }
  }
}
